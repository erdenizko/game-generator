generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameType {
  HEXAGON_MINING
  CASINO_WHEEL
  SLOT_MACHINE
}

model Partner {
  id         String       @id @default(cuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  EmbedToken EmbedToken[]
  GameConfig GameConfig[]
}

model GameSession {
  id               String           @id @default(cuid())
  playerIdentifier String
  gameConfigId     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  AnalyticsEvent   AnalyticsEvent[]
  GameAction       GameAction[]
  GameConfig       GameConfig       @relation(fields: [gameConfigId], references: [id])

  @@index([playerIdentifier])
}

model AnalyticsEvent {
  id            String      @id
  gameSessionId String
  eventType     String
  payload       Json
  createdAt     DateTime    @default(now())
  GameSession   GameSession @relation(fields: [gameSessionId], references: [id])
}

model EmbedToken {
  id          String   @id
  token       String   @unique
  partnerId   String
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Partner     Partner  @relation(fields: [partnerId], references: [id])
}

model GameAction {
  id            String      @id
  gameSessionId String
  actionType    String
  payload       Json
  createdAt     DateTime    @default(now())
  GameSession   GameSession @relation(fields: [gameSessionId], references: [id])
}

model GameConfig {
  id        String   @id
  name      String   @default("default")
  gameType  GameType @default(HEXAGON_MINING)
  partnerId String?
  Partner   Partner? @relation(fields: [partnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Common casino settings
  backgroundUrl   String?
  defaultBet      Int?    @default(100)
  betAmounts      Int[]   @default([100, 200, 500])
  spinsPerSession Int     @default(10)
  wallet          Int     @default(10000)

  // Sound assets
  winSoundUrl  String?
  loseSoundUrl String?

  // Mascot assets
  mascotImageUrl       String?
  mascotOnWinImageUrl  String?
  mascotOnLoseImageUrl String?

  // Prize symbol assets (casino terminology)
  dustPrizeImageUrl    String?
  rockPrizeImageUrl    String?
  oilPrizeImageUrl     String?
  goldPrizeImageUrl    String?
  diamondPrizeImageUrl String?

  // Hexagon mining game specific (legacy support)
  movesPerRound           Int     @default(10)
  diamondImageUrl         String?
  dustImageUrl            String?
  goldImageUrl            String?
  oilImageUrl             String?
  rockImageUrl            String?
  mascotOnDustImageUrl    String?
  mascotOnRockImageUrl    String?
  mascotOnOilImageUrl     String?
  mascotOnGoldImageUrl    String?
  mascotOnDiamondImageUrl String?

  // Prize probabilities (casino terminology)
  probDust    Int @default(50)
  probRock    Int @default(30)
  probOil     Int @default(15)
  probGold    Int @default(4)
  probDiamond Int @default(1)

  // Prize multipliers (casino terminology)
  multDiamond Float @default(5)
  multGold    Float @default(3)
  multOil     Float @default(2)

  // Casino wheel specific settings
  wheelSegments Json? // Array of {label, color, probability, multiplier}
  wheelSpeed    Float? @default(3.0)
  wheelDuration Int?   @default(4000)

  // Slot machine specific settings
  slotReels    Json? // Array of reel configurations
  slotSymbols  Json? // Available symbols with weights
  slotPaylines Json? // Winning combinations
  autoSpin     Boolean @default(false)

  GameSession GameSession[]

  @@unique([partnerId, name])
}

model Admin {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String
  passwordResetToken  String?   @unique
  passwordResetExpiry DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}
